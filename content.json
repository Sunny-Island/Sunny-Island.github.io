{"meta":{"title":"赵家贝的博客","subtitle":"","description":"","author":"赵家贝","url":"http://example.com","root":"/"},"pages":[{"title":"test","date":"2021-03-29T09:12:36.000Z","updated":"2021-04-01T02:34:32.205Z","comments":true,"path":"test/index.html","permalink":"http://example.com/test/index.html","excerpt":"","text":""}],"posts":[{"title":"CS144笔记(3)","slug":"CS144笔记（3）","date":"2021-03-30T11:01:29.000Z","updated":"2021-04-01T02:34:32.205Z","comments":true,"path":"2021/03/30/CS144笔记（3）/","link":"","permalink":"http://example.com/2021/03/30/CS144%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/","excerpt":"","text":"TCP可靠的，端到端的传输协议。双向通信=连接。在两端TCP会留下一个状态机。三次握手建立TCPA:SynB:Syn+AckA:AckTCP:stream of bytes serviceA将数据传入TCP segment，B从segment中解析交给应用程序。可能被多次传输。最小1byte比如ssh发送大量数据：填满segment知道最大IP数据包四次挥手关闭TCPTCP的服务特点： Stream of bytes:可靠的字节流传输 Reliable delivery: 收到信息会发送acknowledgments（ack）表示信息已经被接受 checksum校验和检查是否有脏数据（每个segment都有） 序列号检查是否有遗漏数据（segment lost） flow control防止接收方被淹没，接收方有空间则多发，没空间就少发 In sequence: TCP层会对收到的数据进行重新排序使之有序。 Congestion Control 为了实现上述的功能，TCP的header比较复杂。 destination port,source port：把同一台主机的不同TCP连接区分开 sequence number: first byte，下一个number则是上一个number+上一个length acknowledgement sequence: 当前接收到哪个字节 flag位，建立连接和断开会用到ack, fin, syn 等等，还有psh要求立刻发送数据 常见端口号： 21 FTP 22 SSH 23 smtp 80 HTTP 443 HTTPS 1433 MSSQLserver 3306 MySQL 11211 memcached IP中明确告诉我们使用的协议是TCP，通过端口号就可以找到对应的TCP连接。 TCP还有重传，并且利用滑动窗口来做flow control。 UDP应用程序不需要可靠，或者自己处理重传。非常简单。标头只有4个Source port, destination portchecksum,lengthchecksum 包含ip headerUDP信息可能被交付也可能不被交付。UDP的服务特点： 没有连接，数据包传输顺序不确定 不可靠。没有确认，没有探测乱序或者丢失的服务有点像IP的服务。不提供交付保证。应用:DNS,快速高效。 ICMPIP， Routing Tables， ICMP 构成了网络层作错误报告，路由器处理包出了意外，用于向数据源发消息，找出数据包经过的路径。属于传输层协议。不可靠，用于指出问题，不会重发依赖于IP层传输ICMP的一个重要应用：ping，traceroter End to end principle为什么提供这种服务，而不采取更多服务的提供，比如压缩合并文件。 Error Detection校验和 循环冗余码CRC 消息认证码MAC不同层使用不同的方法，结合在一起使得网络的传输错误率非常低。 Checksum不可靠，简单，两个错码可能相互抵消IP/TCP层使用 Cycli redundancy code消耗较大，可以避免很多错误，c位校验码可以检验c位以下的所有错误。在链路层常常使用，可以利用硬件快速计算。 Message authentication code鲁棒性强，可以抵抗恶意信息。TLS层使用（应用层） Finite State Machines比如TCP三次握手的时候会用到。","categories":[],"tags":[{"name":"CS144","slug":"CS144","permalink":"http://example.com/tags/CS144/"},{"name":"计网","slug":"计网","permalink":"http://example.com/tags/%E8%AE%A1%E7%BD%91/"},{"name":"TCP","slug":"TCP","permalink":"http://example.com/tags/TCP/"}]},{"title":"哈希小知识","slug":"哈希小知识","date":"2021-03-13T21:04:20.000Z","updated":"2021-04-01T02:34:32.205Z","comments":true,"path":"2021/03/13/哈希小知识/","link":"","permalink":"http://example.com/2021/03/13/%E5%93%88%E5%B8%8C%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"Hash散列函数为什么要对素数取余假设散列函数是$$hash(key) = key % M= key-xm\\$$假设key和M有公约数g$$key = ag,m =bg\\hash(key)=key-xm = key-[\\frac{a}{b}]m\\0\\le \\frac{a}{b}\\le a$$显然$hash(key)$的取值只有$a+1$种可能，在[0, m-1]上就不是均匀分布了。","categories":[],"tags":[{"name":"Hash","slug":"Hash","permalink":"http://example.com/tags/Hash/"}]},{"title":"CS144笔记(2)","slug":"CS144笔记（2）","date":"2021-03-12T16:46:31.000Z","updated":"2021-04-01T02:34:32.205Z","comments":true,"path":"2021/03/12/CS144笔记（2）/","link":"","permalink":"http://example.com/2021/03/12/CS144%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/","excerpt":"","text":"Memory计算机要把信息写到内存中，然后再通过网络发送消息。计算机之间要统一格式，方便阅读这些消息。 Byte OrderLittle endian: 对计算机更有效 Big endian: 方便人类阅读协议选择一个：Internet都选择了Bigendian但是处理器是little endian，很难受host&amp;&amp;network的顺序host和network之间要转换，注意这一点。network选择了Bigendian Packet Formats(IP 网络层)IPV4长度是16，4个16进制数，最长是2^16有目标地址，源地址需要独立的，唯一的地址地址长度32bits，4个八位数字子网掩码：划分网路号和机器号子网掩码前x是1，后32-x是0，对IP地址做与运算，结果相同的是同一个机器同一个IP经过不同的子网掩码会划分出不同的机器号和网络号前缀的设置涉及到子网划分需要的地址块必须是2的整数幂，而且有对其要求（位于字节边界上） 三类地址划分。随着主机增加，这类方法显得很粗糙 CIDR把多个具有相同前缀的地址块聚合成一个大的地址块（路由聚合） 避免了路由信息爆炸。 路由聚合和子网划分可以协同工作。 当一个数据包到达时，路由器做最长前缀匹配，发送。 Longest prefix match路由器选择发送的链路171.33.x.x match 171.33.5.245 and 171.33.1.1如果匹配不到，选择默认链路路由器有转发表，包含CIDR条目和对应的下一跳link/x 越短，匹配的IP范围更广泛 Address Resolution Protocol设备有IP地址，网络层需要通过IP地址找到具体的下一跳的链接地址。IP是网络级地址，link address 描述了特定的网卡，接受链路层的帧。即 以太网地址。购买网卡可以获得唯一的以太网地址。总之就是IP是网络层的，链路层需要自己的具体地址。","categories":[],"tags":[{"name":"CS144","slug":"CS144","permalink":"http://example.com/tags/CS144/"},{"name":"计网","slug":"计网","permalink":"http://example.com/tags/%E8%AE%A1%E7%BD%91/"},{"name":"IPv4","slug":"IPv4","permalink":"http://example.com/tags/IPv4/"}]},{"title":"CS144笔记（1）","slug":"CS144笔记（1）","date":"2021-03-02T15:01:23.000Z","updated":"2021-04-01T02:34:32.205Z","comments":true,"path":"2021/03/02/CS144笔记（1）/","link":"","permalink":"http://example.com/2021/03/02/CS144%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/","excerpt":"","text":"可靠的双向字节流把计算机通信简化成读、写。 例1：www (http协议) http协议以文件为中心，Clinet向Server发送请求（GET），得到root page和一个状态码（比如200成功码，400失败码） http是人类可以理解的ASCII文本 例2：bit Bit Torrent breaks files into pieces clients join and leave swarms 以种子文件为起点，通过http下载。 描述了tracker的信息 Tracker跟踪所有客户端成员 Client向Tracker请求客户端列表，并向这些客户端请求数据。 Skype NAT:如果你在NAT之后，你可以打开其他连接，但其他Clinet不能随意打开你。个人计算机通常位于NAT之后 集合服务器(Rendezvous) A在NAT后，B不在。B请求rendezvous，rendezvous请求A，A请求B建立连接。最终的结果是A向B发起连接，所以叫反向连接、 中继服务器(Relay) Relay向A和B转发数据。 四层网络模型分层设计思想： - Application - Transport - Network - Link Link 网络组成：links hosts routers 数据链路层的工作是一次通过一个链路传输数据 常见的连接：以太网、wifi 传输帧 Network 最重要的一层 收到Link的信息，并通过router告诉Link下一跳的地址 传输包packet data+header IP(网络层协议) IP协议尽量把数据包传达到另一端,但不保证 IP协议可能会乱序和丢失 需要传输层一起工作保证不出差错 Datagrame 独立传输的数据包，由路由逐步传输 Unreliable 数据包可能被丢失 Best effort 缓存占满时丢弃数据包，错误的路由表导致发送错误(必要情况下才会发生) Connecctionless 不保留连接的状况，不是从建立连接开始的。 Transport TCP:重传,保证数据正确传输 有些不需要TCP(可靠) UDP:不保证可靠传输 Application WEB, http get,直接在应用层使用. 每一层只与另一层通信 IP(网络层协议)- IP协议尽量把数据包传达到另一端,但不保证 - IP协议可能会乱序和丢失 - 需要传输层一起工作保证不出差错 - Datagrame 独立传输的数据包，由路由逐步传输 - Unreliable 数据包可能被丢失 - Best effort 缓存占满时丢弃数据包，错误的路由表导致发送错误(必要情况下才会发生) - Connecctionless 不保留连接的状况，不是从建立连接开始的。 end-to-end principle: 如果可能，尽可能在end hosts处实现功能 IP防止数据包反复循环（路由中的转发表损坏） 报头中，TTL 从128开始，每一跳-1，归零时被路由器丢弃，可能陷入了环路 会对数据包分段，路由器也会根据实际情况拆分数据包 使用header校验和，在报头中。减少传递到错误目的地的机会。 IP有不同的版本 IPV4 32bit， IPV6 128bit IP允许将新字段加到header中。 IPV4 Datagram()版本 区分服务 分段偏移量 校验和 协议 TTL 总长度 源地址 目标地址 TCP协议（传输层）IP找到机器，TCP是找到端口号向特定服务通信的。80端口一般是网页服务 数据包交换原则分层设计原则封装原则 分散了可能存在的隐患 方便复用，各组件单独工作 应用层 message 报文 传输层 TCP segment 报文段 UDP 用户数据段 网络层 IP 数据报 datagram (IPV4 IPV6)，packet（包） 链路层：帧 framing 物理层 bit","categories":[],"tags":[{"name":"CS144","slug":"CS144","permalink":"http://example.com/tags/CS144/"},{"name":"计网","slug":"计网","permalink":"http://example.com/tags/%E8%AE%A1%E7%BD%91/"}]},{"title":"第一篇博客","slug":"第一篇博客","date":"2021-02-22T11:10:54.000Z","updated":"2021-04-01T02:34:32.205Z","comments":true,"path":"2021/02/22/第一篇博客/","link":"","permalink":"http://example.com/2021/02/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"测试字号测试字号测试引用 今は無理でも、いずれできるようになる。 小柚子微信签名 测试代码 1System.out.println(&#x27;Hello World!&#x27;);","categories":[],"tags":[{"name":"test1","slug":"test1","permalink":"http://example.com/tags/test1/"},{"name":"test2","slug":"test2","permalink":"http://example.com/tags/test2/"}]}],"categories":[],"tags":[{"name":"CS144","slug":"CS144","permalink":"http://example.com/tags/CS144/"},{"name":"计网","slug":"计网","permalink":"http://example.com/tags/%E8%AE%A1%E7%BD%91/"},{"name":"TCP","slug":"TCP","permalink":"http://example.com/tags/TCP/"},{"name":"Hash","slug":"Hash","permalink":"http://example.com/tags/Hash/"},{"name":"IPv4","slug":"IPv4","permalink":"http://example.com/tags/IPv4/"},{"name":"test1","slug":"test1","permalink":"http://example.com/tags/test1/"},{"name":"test2","slug":"test2","permalink":"http://example.com/tags/test2/"}]}